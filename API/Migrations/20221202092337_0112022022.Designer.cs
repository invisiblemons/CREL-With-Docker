// <auto-generated />
using System;
using CREL_BE.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CREL_BE.Migrations
{
    [DbContext(typeof(CRELDBContext))]
    [Migration("20221202092337_0112022022")]
    partial class _0112022022
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CREL_BE.Entities.Appointment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("BrandId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("BrandID");

                    b.Property<decimal>("BrokerId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("BrokerID");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PropertyId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PropertyID");

                    b.Property<string>("RejectMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("BrandId", "BrokerId", "PropertyId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("CREL_BE.Entities.AreaManager", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("AvatarFileId")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("AvatarFileID");

                    b.Property<string>("AvatarLink")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AreaManager");
                });

            modelBuilder.Entity("CREL_BE.Entities.AreaManagerTeam", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("AreaManagerId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("AreaManagerID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TeamId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("TeamID");

                    b.HasKey("Id");

                    b.HasIndex("AreaManagerId");

                    b.HasIndex("TeamId", "AreaManagerId");

                    b.ToTable("AreaManagerTeam");
                });

            modelBuilder.Entity("CREL_BE.Entities.Brand", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("AvatarFileId")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("AvatarFileID");

                    b.Property<string>("AvatarLink")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("FirebaseUid")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("FirebaseUID");

                    b.Property<decimal?>("IndustryId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("IndustryID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RejectMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("CREL_BE.Entities.BrandRequest", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("AmountFrontage")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("BrandId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("BrandID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("MaxFloorArea")
                        .HasColumnType("float");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("MaxRentalTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MinFloorArea")
                        .HasColumnType("float");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("MinRentalTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("BrandRequest");
                });

            modelBuilder.Entity("CREL_BE.Entities.Broker", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("AvatarFileId")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("AvatarFileID");

                    b.Property<string>("AvatarLink")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TeamId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("TeamID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Broker");
                });

            modelBuilder.Entity("CREL_BE.Entities.Contract", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("BrandId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("BrandID");

                    b.Property<decimal?>("BrokerId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("BrokerID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("OwnerId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("OwnerID");

                    b.Property<string>("PaymentTerm")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("PropertyId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PropertyID");

                    b.Property<string>("ReasonCancel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("BrandId", "OwnerId", "PropertyId", "BrokerId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("CREL_BE.Entities.District", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("District");
                });

            modelBuilder.Entity("CREL_BE.Entities.Industry", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("CREL_BE.Entities.IndustryLocation", b =>
                {
                    b.Property<decimal>("IndustryId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("IndustryID");

                    b.Property<decimal>("LocationId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("LocationID");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("IndustryId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("IndustryId", "LocationId");

                    b.ToTable("IndustryLocation");
                });

            modelBuilder.Entity("CREL_BE.Entities.Location", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PlaceId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("StreetSegmentId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("StreetSegmentID");

                    b.Property<decimal>("WardId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("WardID");

                    b.HasKey("Id");

                    b.HasIndex("StreetSegmentId");

                    b.HasIndex("WardId", "StreetSegmentId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CREL_BE.Entities.Media", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal?>("ContractId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ContractID");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("FileID");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<decimal?>("ProjectId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ProjectID");

                    b.Property<decimal?>("PropertyId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PropertyID");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ContractId", "ProjectId", "PropertyId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("CREL_BE.Entities.Owner", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("CREL_BE.Entities.Project", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("DistrictId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("DistrictID");

                    b.Property<DateTime?>("HandoverYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("CREL_BE.Entities.Property", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<double?>("Area")
                        .HasColumnType("float");

                    b.Property<decimal?>("BrokerId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("BrokerID");

                    b.Property<int?>("Certificates")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositTerm")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("FloorArea")
                        .HasColumnType("float");

                    b.Property<double?>("Frontage")
                        .HasColumnType("float");

                    b.Property<double?>("Horizontal")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LocationId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("LocationID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentTerm")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("ProjectId")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RentalCondition")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RentalTerm")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("RoadWidth")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double?>("Vertical")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("BrokerId", "ProjectId", "LocationId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("CREL_BE.Entities.PropertyBrand", b =>
                {
                    b.Property<decimal>("BrandId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("BrandID");

                    b.Property<decimal>("PropertyId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PropertyID");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("BrandId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("BrandId", "PropertyId");

                    b.ToTable("PropertyBrand");
                });

            modelBuilder.Entity("CREL_BE.Entities.Store", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("BrandId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("BrandID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("CREL_BE.Entities.StreetSegment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("DistrictId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("DistrictID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("StreetSegment");
                });

            modelBuilder.Entity("CREL_BE.Entities.Team", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("CREL_BE.Entities.Ward", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("DistrictId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("DistrictID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TeamId")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("TeamID");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("TeamId", "DistrictId");

                    b.ToTable("Ward");
                });

            modelBuilder.Entity("OwnerProperty", b =>
                {
                    b.Property<decimal>("OwnersId")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("PropertiesId")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("OwnersId", "PropertiesId");

                    b.HasIndex("PropertiesId");

                    b.ToTable("OwnerProperty");
                });

            modelBuilder.Entity("CREL_BE.Entities.Appointment", b =>
                {
                    b.HasOne("CREL_BE.Entities.Brand", "Brand")
                        .WithMany("Appointments")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Broker", "Broker")
                        .WithMany("Appointments")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Property", "Properties")
                        .WithMany("Appointments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Broker");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CREL_BE.Entities.AreaManagerTeam", b =>
                {
                    b.HasOne("CREL_BE.Entities.AreaManager", "AreaManager")
                        .WithMany("AreaManagerTeams")
                        .HasForeignKey("AreaManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Team", "Team")
                        .WithMany("AreaManagerTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaManager");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CREL_BE.Entities.Brand", b =>
                {
                    b.HasOne("CREL_BE.Entities.Industry", "Industry")
                        .WithMany("Brands")
                        .HasForeignKey("IndustryId");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("CREL_BE.Entities.BrandRequest", b =>
                {
                    b.HasOne("CREL_BE.Entities.Brand", "Brand")
                        .WithMany("BrandRequests")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CREL_BE.Entities.Broker", b =>
                {
                    b.HasOne("CREL_BE.Entities.Team", "Team")
                        .WithMany("Brokers")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CREL_BE.Entities.Contract", b =>
                {
                    b.HasOne("CREL_BE.Entities.Brand", "Brand")
                        .WithMany("Contracts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Broker", "Broker")
                        .WithMany("Contracts")
                        .HasForeignKey("BrokerId");

                    b.HasOne("CREL_BE.Entities.Owner", "Owner")
                        .WithMany("Contracts")
                        .HasForeignKey("OwnerId");

                    b.HasOne("CREL_BE.Entities.Property", "Property")
                        .WithMany("Contracts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Broker");

                    b.Navigation("Owner");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("CREL_BE.Entities.IndustryLocation", b =>
                {
                    b.HasOne("CREL_BE.Entities.Industry", "Industry")
                        .WithMany("IndustryLocations")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Location", "Location")
                        .WithMany("IndustryLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CREL_BE.Entities.Location", b =>
                {
                    b.HasOne("CREL_BE.Entities.StreetSegment", "StreetSegment")
                        .WithMany("Locations")
                        .HasForeignKey("StreetSegmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Ward", "Ward")
                        .WithMany("Locations")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StreetSegment");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("CREL_BE.Entities.Media", b =>
                {
                    b.HasOne("CREL_BE.Entities.Contract", "Contract")
                        .WithMany("Media")
                        .HasForeignKey("ContractId");

                    b.HasOne("CREL_BE.Entities.Project", "Project")
                        .WithMany("Media")
                        .HasForeignKey("ProjectId");

                    b.HasOne("CREL_BE.Entities.Property", "Property")
                        .WithMany("Media")
                        .HasForeignKey("PropertyId");

                    b.Navigation("Contract");

                    b.Navigation("Project");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("CREL_BE.Entities.Project", b =>
                {
                    b.HasOne("CREL_BE.Entities.District", "District")
                        .WithMany("Projects")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("CREL_BE.Entities.Property", b =>
                {
                    b.HasOne("CREL_BE.Entities.Broker", "Broker")
                        .WithMany("Properties")
                        .HasForeignKey("BrokerId");

                    b.HasOne("CREL_BE.Entities.Location", "Location")
                        .WithMany("Properties")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Project", "Project")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Broker");

                    b.Navigation("Location");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CREL_BE.Entities.PropertyBrand", b =>
                {
                    b.HasOne("CREL_BE.Entities.Brand", "Brand")
                        .WithMany("PropertyBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Property", "Property")
                        .WithMany("PropertyBrands")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("CREL_BE.Entities.Store", b =>
                {
                    b.HasOne("CREL_BE.Entities.Brand", "Brand")
                        .WithMany("Stores")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CREL_BE.Entities.StreetSegment", b =>
                {
                    b.HasOne("CREL_BE.Entities.District", "District")
                        .WithMany("StreetSegments")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("CREL_BE.Entities.Ward", b =>
                {
                    b.HasOne("CREL_BE.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Team", "Team")
                        .WithMany("Wards")
                        .HasForeignKey("TeamId");

                    b.Navigation("District");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OwnerProperty", b =>
                {
                    b.HasOne("CREL_BE.Entities.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CREL_BE.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CREL_BE.Entities.AreaManager", b =>
                {
                    b.Navigation("AreaManagerTeams");
                });

            modelBuilder.Entity("CREL_BE.Entities.Brand", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BrandRequests");

                    b.Navigation("Contracts");

                    b.Navigation("PropertyBrands");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("CREL_BE.Entities.Broker", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Contracts");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CREL_BE.Entities.Contract", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("CREL_BE.Entities.District", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("StreetSegments");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("CREL_BE.Entities.Industry", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("IndustryLocations");
                });

            modelBuilder.Entity("CREL_BE.Entities.Location", b =>
                {
                    b.Navigation("IndustryLocations");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CREL_BE.Entities.Owner", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("CREL_BE.Entities.Project", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CREL_BE.Entities.Property", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Contracts");

                    b.Navigation("Media");

                    b.Navigation("PropertyBrands");
                });

            modelBuilder.Entity("CREL_BE.Entities.StreetSegment", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("CREL_BE.Entities.Team", b =>
                {
                    b.Navigation("AreaManagerTeams");

                    b.Navigation("Brokers");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("CREL_BE.Entities.Ward", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
